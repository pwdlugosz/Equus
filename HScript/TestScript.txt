
/*
	MAIN VARIABLES:
	FILE_DIR: THE DIRECTORY OF THE FILE; THIS WILL BE USED AT THE TEMP DIRECTORY
	WORK_BOOK_NAME: THE NAME OF THE WORKBOOK TO CRACK
	NEW_WORK_BOOK_NAME: THE NAME OF THE CRACKED WORKBOOK
*/
DECLARE
	FILE_DIR AS STRING = 'C:\Users\pwdlu_000\Documents\Workbook_Tests\BPT\',
	WORK_BOOK_NAME AS STRING = 'BPT2017.xlam', 
	NEW_WORK_BOOK_NAME AS STRING = 'BPT2017_BREAK.xlam'
	;
GO;

// CREATE A COPY OF THE CURRENT FILE //
FILE.COPY 
	FILE_DIR + WORK_BOOK_NAME, 
	FILE_DIR + 'BREAK_TEST.zip';
GO;

// UNZIP THE COPY //
FILE.UNZIP
	FILE_DIR + 'BREAK_TEST.zip', 
	FILE_DIR + 'BREAK_TEST\';
GO;	

// LOOK FOR THE MACRO FILE //
FILE.READ_ALL_BYTES
	FILE_DIR + 'BREAK_TEST\xl\vbaProject.bin',
	'XL_BLOB';
GO;

// CREATE VARIABLES TO SEARCH FOR //
DECLARE
	CMG_BLOB AS BLOB = FROMUTF8('CMG="'),
	DPB_BLOB AS BLOB = FROMUTF8('DPB="'),
	GC_BLOB AS BLOB = FROMUTF8('GC="')
	;
GO;

// FIND THE POSITION OF THE PASSWORD BIT MARKETS //
DECLARE
	CMG_POS AS INT = POSITION(XL_BLOB, CMG_BLOB, 0) + 5,
	DPB_POS AS INT = POSITION(XL_BLOB, DPB_BLOB, 0) + 5,
	GC_POS AS INT = POSITION(XL_BLOB, GC_BLOB, 0) + 4
;
GO;

// GET THE LENGTH OF THE BIT MARKERS //
DECLARE
	CMG_LEN AS INT = POSITION(XL_BLOB, FROMUTF8('"'), CMG_POS + 6) - CMG_POS,
	DPB_LEN AS INT = POSITION(XL_BLOB, FROMUTF8('"'), DPB_POS + 6) - DPB_POS,
	GC_LEN AS INT = POSITION(XL_BLOB, FROMUTF8('"'), GC_POS + 5) - GC_POS
;
GO;

// EXTRACT THE CURRENT BIT MARKERS //
DECLARE
	CMG_SIG AS BLOB = SUBSTR(XL_BLOB, CMG_POS, CMG_LEN),
	DPB_SIG AS BLOB = SUBSTR(XL_BLOB, DPB_POS, DPB_LEN),
	GC_SIG AS BLOB = SUBSTR(XL_BLOB, GC_POS, GC_LEN)
;
GO;

// CREATE NEW BIT MARKERS THAT CORRELATE TO 'password' //
DECLARE
	CMG_NEW AS BLOB = FROMUTF8('C4C668B6E87EEC7EEC7AF07AF0'),
	DPB_NEW AS BLOB = FROMUTF8('888A242B412B41D4BF2C41B96161B9142C25576AEF82F8C27133F6C34307A51378DCFC20'),
	GC_NEW AS BLOB = FROMUTF8('4C4EE03E600361036103')
	;
GO;

// PAD THE CMG BIT PATTERN //
WHILE LENGTH(CMG_NEW) < LENGTH(CMG_SIG);
BEGIN
	CMG_NEW += FROMUTF8('00');
END;
GO;

// PAD THE DPB BIT PATTERN //
WHILE LENGTH(DPB_NEW) < LENGTH(DPB_SIG);
BEGIN
	DPB_NEW += FROMUTF8('00');
END;
GO;

// PAD THE GC BIT PATTERN //
WHILE LENGTH(GC_NEW) < LENGTH(GC_SIG);
BEGIN
	GC_NEW += FROMUTF8('00');
END;
GO;

/*

PRINT CMG_SIG, CRLF, TOUTF8(CMG_SIG), CRLF, LENGTH(CMG_SIG), LENGTH(CMG_NEW);
GO;

PRINT DPB_SIG, CRLF, TOUTF8(DPB_SIG), CRLF, LENGTH(DPB_SIG), LENGTH(DPB_NEW);
GO;

PRINT GC_SIG, CRLF, TOUTF8(GC_SIG), CRLF, LENGTH(GC_SIG), LENGTH(GC_NEW);
GO;

*/

// OVER-WRITE THE BIT PATTERNS IN THE CURRENT BUFFER //
DECLARE NEW_XL_BLOB AS BLOB = XL_BLOB; GO;
BEGIN
	XL_BLOB = REPLACE(XL_BLOB, CMG_SIG, CMG_NEW);
	XL_BLOB = REPLACE(XL_BLOB, DPB_SIG, DPB_NEW);
	XL_BLOB = REPLACE(XL_BLOB, GC_SIG, GC_NEW);

END;
GO;

// DUMP THE BYTES BACK TO THE FILE //
FILE.WRITE_ALL_BYTES
	FILE_DIR + 'BREAK_TEST\xl\vbaProject.bin',
	XL_BLOB;
GO;

// ZIP BACK UP //
FILE.ZIP
	FILE_DIR + 'BREAK_TEST\',
	FILE_DIR + NEW_WORK_BOOK_NAME;
%;	
